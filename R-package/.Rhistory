library(mlsauce)
library(mlsauce)
library(devtools)
insurance
library(fpp)
fpp::insurance
plot(fpp::insurance)
dim(fpp::insurance)
plot(log(fpp::insurance))
?density
library(tseries)
# NOT RUN {
n <- 500  # Generate AR(1) process
a <- 0.6
e <- rnorm(n+100)
x <- double(n+100)
x[1] <- rnorm(1)
for(i in 2:(n+100)) {
x[i] <- a * x[i-1] + e[i]
}
x <- ts(x[-(1:100)])
tsbootstrap(x, nb=500, statistic=mean)
# NOT RUN {
n <- 500  # Generate AR(1) process
a <- 0.6
e <- rnorm(n+100)
x <- double(n+100)
x[1] <- rnorm(1)
for(i in 2:(n+100)) {
x[i] <- a * x[i-1] + e[i]
}
x <- ts(x[-(1:100)])
y <- tsbootstrap(x, nb=500, statistic=mean)
y
y$
y$statistic
str(y)
?tsbootstrap
library(fpp)
fpp::insurance
dim(fpp::insurance)
dim(fpp::insurance)
fpp::insurance
library(mlsauce)
?mlsauce::LSBoostClassifier
library(datasets)
X <- as.matrix(iris[, 1:4])
y <- as.integer(iris[, 5]) - 1L
n <- dim(X)[1]
p <- dim(X)[2]
set.seed(21341)
train_index <- sample(x = 1:n, size = floor(0.8*n), replace = TRUE)
test_index <- -train_index
X_train <- as.matrix(X[train_index, ])
y_train <- as.integer(y[train_index])
X_test <- as.matrix(X[test_index, ])
y_test <- as.integer(y[test_index])
obj <- mlsauce::LSBoostClassifier()
print(obj$get_params())
obj$fit(X_train, y_train)
print(obj$score(X_test, y_test))
renv::init()
